# IS727272 - Proyecto - Recorder
'''
    Esta parte del proyecto implementa Proxy (patrón estructural).
'''
import pyaudio, wave, os
from abc import ABC, abstractmethod

# [1] Interfaz de servicio
class Operation(ABC):
    @abstractmethod
    def record(self, duration:float) -> None:
        ''' Recording operation '''

# [2] Servicio
class AudioRecorder(Operation):
    class AudioRecorderException(Exception):
        def __init__(self, msg:str) -> None:
            self._msg = msg
        
        def __str__(self) -> str:
            return self._msg

    def __init__(self, file_name:str = 'recording', file_extension:str = 'mp3') -> None:
        self._CHUNK = 1024
        self._FORMAT = pyaudio.paInt16
        self._CHANNELS = 2
        self._RATE = 44100
        self._OUTPUT_FILE = self._build_path('.'.join([file_name, file_extension]))

    def _build_path(self, file:str) -> str:
        ''' Build recorded file path '''
        return os.path.join(os.getcwd(), r'..\..\generated', file)

    def get_output_path(self) -> str:
        ''' Returns path of generated recording file '''
        return self._OUTPUT_FILE

    def record(self, duration: float = 5.0) -> None:
        if (duration < 5.0): raise AudioRecorder.AudioRecorderException('Duration too short...')

        p = pyaudio.PyAudio()
        stream = p.open(format=self._FORMAT,
                        channels=self._CHANNELS,
                        rate=self._RATE,
                        input=True,
                        frames_per_buffer=self._CHUNK)
        
        print(f'Starting recording with lenght of {duration} seconds...')

        frames = []
        for i in range(int(self._RATE / self._CHUNK * duration)):
            frames.append(stream.read(self._CHUNK))
        else:
            print('Recording done...')

        stream.stop_stream()
        stream.close()
        p.terminate()

        wf = wave.open(self._OUTPUT_FILE, 'wb')
        wf.setnchannels(self._CHANNELS)
        wf.setsampwidth(p.get_sample_size(self._FORMAT))
        wf.setframerate(self._RATE)
        wf.writeframes(b''.join(frames))
        wf.close()

        print(f'Audio file "{self._OUTPUT_FILE}" generated within specified directory')

# [3] Proxy
class RecorderProxy(Operation):
    def __init__(self, recorder: AudioRecorder) -> None:
        ''' Recorder proxy initializer '''
        self.__recorder = recorder
    
    def record(self, duration: float = 5.0) -> None:
        ''' Creates audio recording with given duration '''
        self.__recorder.record(duration)

# [4] Cliente (Prueba para el módulo)
if __name__ == '__main__':
    original_service = AudioRecorder('prueba')
    helper = RecorderProxy(original_service)
    helper.record(5)