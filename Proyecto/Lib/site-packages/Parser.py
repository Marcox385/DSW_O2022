# IS727272 - Proyecto - Parser
'''
    Esta parte del proyecto implementa Factory method (patr贸n creacional)
    con posibilidad de extender sus funcionalidades en releases posteriores.
'''
from __future__ import annotations
from abc import ABC, abstractmethod
from enum import Enum
import re

# Clase auxiliar para implementaciones futuras
class ParserException(Exception):
    def __init__(self, msg:str) -> None:
        ''' Inicializa un error personalizado para parsers '''
        self.msg = msg
    
    def __str__(self) -> str:
        ''' Retorna la representaci贸n del error '''
        return self.msg

# [1] Interface de producto
class Parser(ABC):
    ''' Funci贸n principal compartida '''

    @abstractmethod
    def parse(self, file_path, *values) -> object:
        ''' Retorna los valores parseados '''

# [2] Producto(s) concreto(s) abstracto(s)
class ENVFile(Parser):
    def parse(self, file_path, *values) -> dict:
        if (file_path[-3:] != 'env'): raise ParserException('Incorrect file extension != .env')

        res_dict = {}

        regex_str = r"^(" + ("|".join(values) if values else r'.*') + r")\ ?=\ ?'?([^']*)'?"

        with (open(file_path, 'r')) as file:
            for line in file.readlines():
                holder = re.search(regex_str, line)
                if holder:
                    res_dict[holder.group(1)] = holder.group(2).rstrip('\n')
        
        return res_dict
    
    @property
    def values(self) -> dict:
        ''' Almacenamiento de valores parseados '''
        return self.__values
    
    @values.setter
    def values(self, entries: dict) -> None:
        self.__values = entries

# [3] Clase creadora
class DevEnv:
    ''' Clase creadora para recabaci贸n de valores en el ambiente '''
    def __init__(self) -> None:
        self.current_parse = None
    
    def init_parser(self, parse_type: object) -> Parser:
        ''' Factory Method '''
        self.current_parse = parse_type.value
        return self.current_parse
    
    def begin_parse(self, parse_type: object, file_path, *values):
        return self.init_parser(parse_type).parse(file_path, *values)

# [4] Creadores concretos
class SimpleEnv(DevEnv):
    class ParseType(Enum):
        # name      value
        ENV     =   ENVFile()

# Prueba del funcionamiento
if __name__ == '__main__':
    test = SimpleEnv()
    to_parse = './.env'

    print(test.begin_parse(SimpleEnv.ParseType.ENV, to_parse, 'DOC_CONST', 'API_KEY'))